download nservicebus extract
in powershel run runmefirst

add servicebus reference using nuget

create mvc app with webAPI

RPC			> intent and data are seperate
BusService	> intent and data are sent together


create new Class Library as contract
add nservicebus.interfaces to just class library and NServiceBus reference to web project
and define the message as contract

in MVC application create order controller as empty web api

setup webconfiguration file
<configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="UnicastBusConfig" type="NServiceBus.Config.UnicastBusConfig, NServiceBus.Core" />
  </configSections>

  <UnicastBusConfig>
    <MessageEndpointMappings>
      <add MEssages="BusTop.Contract" Endpoint="busstop.backend" />
      <!--shortcut to backend@localhost(server)-->
    </MessageEndpointMappings>
  </UnicastBusConfig>


config bus in global.ascx file
create Endpoint msmq box (manually) or dynamically using below


------------------------
create class library project for hosting
reference to nservicebus.host

Note :
even if the server Endpoint is down after running host those messages will be grabbed



----------------
Using raven.client