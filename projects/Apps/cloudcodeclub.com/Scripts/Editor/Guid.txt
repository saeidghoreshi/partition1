Link :http://code.google.com/p/lwrte/wiki/API



$(document).ready(function() {
        var arr = $('.rte1').rte({
                css: ['default.css'],
                controls_rte: rte_toolbar,
                controls_html: html_toolbar
        });

        $('.rte2').rte({
                css: ['default.css', 'styles.css'],
                width: 450,
                height: 200,
                controls_rte: rte_toolbar,
                controls_html: html_toolbar
        }, arr);

        //arr is array of RTEm you can use api as you want.

});

Functions
get_content()
Use it if you want to get content of current editor. It's the only right function to get content. Works fine for both mode - design and source.

set_content(content)
Use it if you want to set content of current editor. It's the only right function to set content. Works fine for both mode - design and source.

get_selected_text()
Use it if you want to get selected text without html tags. Works for design mode only.

get_selected_html()
Use it if you want to get selected text with html tags. Works for design mode only.

selection_replace_with(html)
Use it to replace selection with 'html'. Works for design mode only.

editor_cmd(command, args)
Executes built-in 'command' with 'args' for editor in design mode. 'command' is browser specific command for design mode. Works for design mode only.

More about that commands here:
http://msdn.microsoft.com/en-us/library/ms533049(VS.85).aspx
http://www.mozilla.org/editor/midas-spec.html
enable_design_mode()
Turn on Design Mode. Design Mode - mode where you can execute special commands to make changes into DOM. Use editor_cmd function for that. This function does: creates new iframe, copies text from textarea, removes textarea from DOM, turn on design mode for iframe.

disable_design_mode(submit)
Turn off Design Mode. Actually this function does:


get_toolbar()
That function returns jQuery object with current active toolbar ('.rte-toolbar') for editor. Remember, we have different toolbars for source mode and design mode!

activate_toolbar(editor, tb)
That function activates toolbar 'tb' for editor. Actually it does next: remove current toolbar from DOM for 'editor' and insert 'tb' into DOM.

toolbar_click(obj, control)
This is callback function for any toolbar control. Toolbar consists of number of controls (buttons and etc). Read more about toolbars in documentation for it. This callback does next:

If 'control' has own callback(exec parameter of control), than it executes.
If 'control' hasn't callback, but have 'command' and current mode is design mode, then it executes that 'command'. 'obj' is DOM object that was clicked/changed. You can read more about control's callback at documentation for Toolbars, section exec.
get_selection_range()
This function returns range object (browser specific) for current selection. Works for design mode only.

get_selected_element()
This functions locate DOM object at mouse cursor. You can use that node for set_selected_controls function. Works for design mode only.

set_selected_controls(node, controls)
This function marks toolbar's controls (works with 'controls' that you provided) as active for specific node (node is DOM object where mouse cursor is placed right now). Works for design mode only.