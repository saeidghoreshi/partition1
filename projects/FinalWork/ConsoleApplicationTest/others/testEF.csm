using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;



using System.Transactions;
using System.Diagnostics;
using System.Reflection;

using Microsoft.CSharp;
using System.Data.Objects;


namespace ConsoleApplication1
{
    
    class testEF
    {
        public void test()
        {


            using (TransactionScope trans = new TransactionScope())
            {
                var ctx = new context();

                //select all and write
                var q = ctx.testreview.Select(t => t);
                foreach (var e in q) Console.WriteLine(e.id + ",");


                //execute stored procedure
                var q2 = ctx.TESTPROC().First();
                Console.WriteLine("TESTPROC : " + q2);

                //update data
                ctx.test.Where(t => t.id == 1).Single().name = "VVV";
                //All updates  in current context will be ATOMIC in database level
                //by adding transaction scope we can cover other lowlevel actions to be atomic
                ctx.SaveChanges();

                
                //(1)lazy and (2)eager loading
                //(1)Lazy
                Console.WriteLine("lazyloading ................................");
                var lazy = ctx.test.Select(t => t).ToList();
                foreach (var item in lazy)
                {
                    item.testreview.Load();
                    foreach (var item2 in item.testreview)
                        Console.Write(item2.id + "  ,  ");
                }
                //(1)Eager
                Console.WriteLine("\r\n");
                Console.WriteLine("Eager loading ................................");
                var eager = ctx.test.Include("testreview").Select(t => t).ToList();
                foreach (var item in eager)
                    foreach (var item2 in item.testreview)
                        Console.Write(item2.id + "  ,  ");
                Console.WriteLine("\r\n");



                //******************************************/
                //**************NOTE************************/
                //insert/update/delete actions would be customizable by assigning SP to model
                //******************************************/
                //**************NOTE************************/






                trans.Complete();
            }

        }

        public void test2()
        {
            //join > inner join
            //groupjoin > leftjoin   of   from > join > into >defultifempty ()
            //selectmany or (from from) > full  join
            //selectMany > crossjoin

            //Sets
            //intersect , except , union , concat

            //partitionaing
            //skiptwhile , takewhile
            using (var ctx = new context())
            {
                var Q =
                ctx.test
                .OrderBy(t => new { t.name })

                .GroupJoin(ctx.testreview, t => t.id, tr => tr.testid, (t, tr) => new { t, tr })
                    //.SelectMany(X => X.testreview, (t, tr) => new { t, tr })  //Must be X.relatedTable [Full Join]
                    //.SelectMany(X => ctx.testreview, (t, tr) => new { t, tr })  // [Cross Join]

                .GroupBy(mix => mix.t.id)
                .OrderBy(tr => tr.Key)
                .ThenBy(tr => tr.Key)
                .Where(tr => tr.Key > 0)
                ;

                foreach (var item in Q)
                {
                    foreach (var sub in item)
                    {
                        Console.WriteLine("-----------------------------------------------");
                        Console.WriteLine("KEY : (" + item.Key + ") : ");
                        foreach (var trsub in sub.tr)
                            Console.WriteLine("TRS : " + trsub.rate);

                        if (sub.tr.Count() == 0)
                            Console.WriteLine("Empty TRS");
                        else
                            Console.WriteLine("Averrage TRS : " + sub.tr.Average(x => x.rate));
                    }
                }
            }
        }

     

    }

}
